# docker compose --profile all down --remove-orphans
# docker compose --profile all up -d
# docker compose --profile nginx up -d
# docker compose --profile assessment up -d
# docker compose --profile videocall up -d
# docker compose --profile videocall_nginx up -d
# docker compose --profile assessment_nginx up -d
# docker compose --profile all_nginx up -d
# docker compose logs -f assessment
# docker compose logs -f videocall
# docker compose logs -f nginx

# docker compose down --volumes
# docker compose ps

# Assessment:
# ssh root@localhost -p 2219
# Videocall:
# ssh root@localhost -p 2220

# docker commit -m "chrome" -p 1998c1faf9bc  us-docker.pkg.dev/ejfexperiments/us.gcr.io/nogales_assessment_front_back:1.36.1

# http://localhost:4200/
# http://localhost:8081/srv/postgress/test

volumes:
  flowcharts:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: "${FOLDER_CODE_CORE}/flowcharts"
  src:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: "${FOLDER_CODE_CORE}/src"
  srv:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: "${FOLDER_CODE_CORE}/srv"
  postgres:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: "${WORKSPACE}/postgres/data"
  cache:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: "${WORKSPACE}/nginx/cache"
  bucket:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: "${BUCKET_FOLDER}"

networks:
  network_develop:
    name: network_develop
    driver: bridge
    ipam:
      config:
        - subnet: 10.2.0.0/28

services:
  nginx:
    profiles: [ "all", "nginx", "videocall_nginx", "all_nginx" ]
    image: ${IMAGE_NGINX}
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      # - ${WORKSPACE}/nginx/reverse_proxy.conf:/etc/nginx/conf.d/default.conf
      - cache:/data/nginx/cache
    restart: always
    depends_on:
      videocall:
        condition: service_healthy
    command: [nginx-debug, '-g', 'daemon off;']
    networks:
      network_develop:
        aliases:
          - nginx

  # docker run -it us-docker.pkg.dev/ejfexperiments/us.gcr.io/nodeserverdev:v0.8.0 /bin/bash
  assessment:
    profiles: [ "all", "assessment", "all_nginx" ]
    image: ${IMAGE_ASSESSMENT}
    environment:
      PORT: "443"
      USE_SECURE: "yes"
      ENV: "pro"
      LOCAL_TRANSCRIPT: "yes"
      GOOGLE_APPLICATION_CREDENTIALS: ${GCP_SERVICE_ACCOUNT_JSON}
      FACE_SERVER: ""
      TRAIN_SERVER: ""
      WORKSPACE: "/tmp/app"
      MILVUS_URI: ${MILVUS_URI}
      MONGO_USR: ${MONGO_USR}
      MONGO_PASS: ${MONGO_PASS}
      MONGO_URI: ${MONGO_URI}
      MINIO_USR: ${MINIO_USR}
      MINIO_PASS: ${MINIO_PASS}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_URI: ${MINIO_URI}
      NODE_SERVER_PATH: /
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      AUTH_PROVIDER: microsoft
      MICROSOFT_CLIENT_ID: 4c1062f0-7409-4597-9eac-21b87ac6005e
      MICROSOFT_TENANT: e03b8fb1-7e35-4dab-ae1e-aa681402dbf2
      AUTH_GROUP_ID_MAP: ewogICAgICAgICIzNzY5ZjM1YS0xYjcwLTRkZjEtYmU1Mi00YWQyNTdhMTkxNmUiOiAiYXBwc19hZG1pbiIsCiAgICAgICAgIjRiYjczOWI1LTcxNDYtNGQ1Ni1iNDdkLTI1NWRmM2Y5ZTFiMiI6ICJhcHBzX2RldiIsCiAgICAgICAgImFjYjkwMzU0LThjMDgtNDA0OC04ZGFiLTgyNGQ5ODhjMWYyZiI6ICJhcHBzX2VkaXRvcnMiLAogICAgICAgICIwODg5MGViNy1jZDgyLTRmZTUtOWI0Ny00MjI1Y2Y0MGEwZjEiOiAiYXBwc19oaXN0b3JpYW5zIiwKICAgICAgICAiMmM2NjcxYzQtYjI3NC00NGJkLWFlOWItZjU2NDc2NzFmMzFhIjogImFwcHNfaW1wb3J0ZXIiLAogICAgICAgICI0NTg3NDMzMi03Y2Y1LTQwNDctYmE1Ny0yZWNkOTE4M2I3ZmMiOiAiYXBwc192aWRlb2NhbGxfYWRtaW4iLAogICAgICAgICI3M2JjYjkyOS0wY2E2LTRiNTItOWVkZC00YWMzOWU2ZDZlOWUiOiAiYXBwc192aWRlb2NhbGxfcHJvdmlkZXIiCiAgICAgIH0=
      SEND_GRID_VARIABLE: ${SEND_GRID_VARIABLE}
      EMAIL_SENDER: ejdelgado@nogalespsychological.com
    #volumes:
    #  - /home/ejfdelgado/desarrollo/nogales-assessment:/tmp/app
    ports:
      - "2219:22"
      - "443:443"
    networks:
      network_develop:
        ipv4_address: 10.2.0.5
        aliases:
          - assessment
    healthcheck:
      test: curl --fail --insecure https://localhost:443/srv/shell?cmd=ls || exit 1
      interval: 2s
      timeout: 2s
      retries: 60
      start_period: 10s
    command: sh /tmp/app/run.sh

  videocall:
    profiles: [ "all", "videocall", "videocall_nginx", "all_nginx" ]
    image: ${IMAGE_VIDEOCALL}
    environment:
      PORT: "443"
      ENV: "pro"
      GOOGLE_APPLICATION_CREDENTIALS: ${GCP_SERVICE_ACCOUNT_JSON}
      FACE_SERVER: ""
      TRAIN_SERVER: ""
      WORKSPACE: "/tmp/app"
      USE_SECURE: "yes"
      MILVUS_URI: ${MILVUS_URI}
      MONGO_USR: ${MONGO_USR}
      MONGO_PASS: ${MONGO_PASS}
      MONGO_URI: ${MONGO_URI}
      MINIO_USR: ${MINIO_USR}
      MINIO_PASS: ${MINIO_PASS}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_URI: ${MINIO_URI}
      NODE_SERVER_PATH: "/videocall/"
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: nogales
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
    ports:
      - "2220:22"
    networks:
      network_develop:
        ipv4_address: 10.2.0.4
        aliases:
          - videocall
    healthcheck:
      test: curl --fail --insecure option https://localhost:443/srv/shell?cmd=ls || exit 1
      interval: 2s
      timeout: 2s
      retries: 60
      start_period: 10s
    command: sh /tmp/app/run.sh

  postgres:
    profiles: [ "all" ]
    image: ${IMAGE_POSTGRES}
    ports:
      - 5432:5432
    volumes:
      - postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=pass
      - POSTGRES_USER=user
      - POSTGRES_DB=nogales
    networks:
      network_develop:
        aliases:
          - postgres

  mongodb:
    profiles: [ "all" ]
    image: mongodb/mongodb-atlas-local
    command: sh /tmp/mongo/run.sh
    #user: "systemd-coredump"
    environment:
      - MONGODB_INITDB_ROOT_USERNAME=${MONGO_USR}
      - MONGODB_INITDB_ROOT_PASSWORD=${MONGO_PASS}
    ports:
      - 27017:27017
    volumes:
      - ${WORKSPACE}/mongo/run.sh:/tmp/mongo/run.sh
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      network_develop:
        aliases:
          - mongodb
    healthcheck:
      test: test $$(mongosh --port 30001 --quiet --eval "try {rs.initiate({_id:'my-replica-set',members:[{_id:0,host:\"mongo:30001\"}]})} catch(e) {rs.status().ok}") -eq 1
      interval: 10s
      start_period: 30s
      retries: 20
